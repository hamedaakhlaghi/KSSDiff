// This file is automatically generated by generate_resource_file.sh. DO NOT EDIT!

import Foundation

fileprivate let encodedString = """
VGhpcyBpcyBhICcnJ2xpc3Qgb2YgbmV3c3BhcGVycyBwdWJsaXNoZWQgYnkgW1tKb3VybmFsIFJlZ2lz
dGVyIENvbXBhbnldXScnJy4KClRoZSBjb21wYW55IG93bnMgZGFpbHkgYW5kIHdlZWtseSBuZXdzcGFw
ZXJzLCBvdGhlciBwcmludCBtZWRpYSBwcm9wZXJ0aWVzIGFuZCBuZXdzcGFwZXItYWZmaWxpYXRlZCBs
b2NhbCBXZWJzaXRlcyBpbiB0aGUgW1tVLlMuXV0gc3RhdGVzIG9mIFtbQ29ubmVjdGljdXRdXSwgW1tN
aWNoaWdhbl1dLCBbW05ldyBZb3JrXV0sIFtbT2hpb11dIGFuZCBbW1Blbm5zeWx2YW5pYV1dLCBvcmdh
bml6ZWQgaW4gc2l4IGdlb2dyYXBoaWMgImNsdXN0ZXJzIjo8cmVmPltodHRwOi8vd3d3LmpvdXJuYWxy
ZWdpc3Rlci5jb20vbmV3c3BhcGVycy5odG1sIEpvdXJuYWwgUmVnaXN0ZXIgQ29tcGFueTogT3VyIE5l
d3NwYXBlcnNdLCBhY2Nlc3NlZCBGZWJydWFyeSAxMCwgMjAwOC48L3JlZj4KCj09IENhcGl0YWwtU2Fy
YXRvZ2EgPT0KVGhyZWUgZGFpbGllcywgYXNzb2NpYXRlZCB3ZWVrbGllcyBhbmQgW1twZW5ueXNhdmVy
XV1zIGluIGdyZWF0ZXIgW1tBbGJhbnksIE5ldyBZb3JrXV07IGFsc28gW2h0dHA6Ly93d3cuY2FwaXRh
bGNlbnRyYWwuY29tIGNhcGl0YWxjZW50cmFsLmNvbV0gYW5kIFtodHRwOi8vd3d3LmpvYnNpbm5ld3lv
cmsuY29tIEpvYnNJbk5ld1lvcmsuY29tXS4KCiogJydUaGUgT25laWRhIERhaWx5IERpc3BhdGNoJycg
e3tXU3xvbmVpZGFkaXNwYXRjaC5jb219fSBvZiBbW09uZWlkYSwgTmV3IFlvcmtdXQoqICcnW1tUaGUg
UmVjb3JkIChUcm95KXxUaGUgUmVjb3JkXV0nJyB7e1dTfHRyb3lyZWNvcmQuY29tfX0gb2YgW1tUcm95
LCBOZXcgWW9ya11dCiogJydbW1RoZSBTYXJhdG9naWFuXV0nJyB7e1dTfHNhcmF0b2dpYW4uY29tfX0g
b2YgW1tTYXJhdG9nYSBTcHJpbmdzLCBOZXcgWW9ya11dCiogV2Vla2xpZXM6CioqICcnQ29tbXVuaXR5
IE5ld3MnJyB7e1dTfGNud2Vla2x5LmNvbX19IHdlZWtseSBvZiBbW0NsaWZ0b24gUGFyaywgTmV3IFlv
cmtdXQoqKiAnJ1JvbWUgT2JzZXJ2ZXInJyBvZiBbW1JvbWUsIE5ldyBZb3JrXV0KKiogJydMaWZlICYg
VGltZXMgb2YgVXRpY2EnJyBvZiBbW1V0aWNhLCBOZXcgWW9ya11dCgo9PSBDb25uZWN0aWN1dCA9PQpG
aXZlIGRhaWxpZXMsIGFzc29jaWF0ZWQgd2Vla2xpZXMgYW5kIFtbcGVubnlzYXZlcl1dcyBpbiB0aGUg
c3RhdGUgb2YgW1tDb25uZWN0aWN1dF1dOyBhbHNvIFtodHRwOi8vd3d3LmN0Y2VudHJhbC5jb20gQ1Rj
ZW50cmFsLmNvbV0sIFtodHRwOi8vd3d3LmN0Y2Fyc2FuZHRydWNrcy5jb20gQ1RDYXJzQW5kVHJ1Y2tz
LmNvbV0gYW5kIFtodHRwOi8vd3d3LmpvYnNpbmN0LmNvbSBKb2JzSW5DVC5jb21dLgoKKiAnJ1RoZSBN
aWRkbGV0b3duIFByZXNzJycge3tXU3xtaWRkbGV0b3ducHJlc3MuY29tfX0gb2YgW1tNaWRkbGV0b3du
LCBDb25uZWN0aWN1dHxNaWRkbGV0b3duXV0KKiAnJ1tbTmV3IEhhdmVuIFJlZ2lzdGVyXV0nJyB7e1dT
fG5ld2hhdmVucmVnaXN0ZXIuY29tfX0gb2YgW1tOZXcgSGF2ZW4sIENvbm5lY3RpY3V0fE5ldyBIYXZl
bl1dCiogJydUaGUgUmVnaXN0ZXIgQ2l0aXplbicnIHt7V1N8cmVnaXN0ZXJjaXRpemVuLmNvbX19IG9m
IFtbVG9ycmluZ3RvbiwgQ29ubmVjdGljdXR8VG9ycmluZ3Rvbl1dCgoqIFtbTmV3IEhhdmVuIFJlZ2lz
dGVyI0NvbXBldGl0b3JzfEVsbSBDaXR5IE5ld3NwYXBlcnNdXSB7e1dTfGN0Y2VudHJhbC5jb219fQoq
KiAnJ1RoZSBBZHZlcnRpc2VyJycgb2YgW1tFYXN0IEhhdmVuLCBDb25uZWN0aWN1dHxFYXN0IEhhdmVu
XV0KKiogJydIYW1kZW4gQ2hyb25pY2xlJycgb2YgW1tIYW1kZW4sIENvbm5lY3RpY3V0fEhhbWRlbl1d
CioqICcnTWlsZm9yZCBXZWVrbHknJyBvZiBbW01pbGZvcmQsIENvbm5lY3RpY3V0fE1pbGZvcmRdXQoq
KiAnJ1RoZSBPcmFuZ2UgQnVsbGV0aW4nJyBvZiBbW09yYW5nZSwgQ29ubmVjdGljdXR8T3JhbmdlXV0K
KiogJydUaGUgUG9zdCcnIG9mIFtbTm9ydGggSGF2ZW4sIENvbm5lY3RpY3V0fE5vcnRoIEhhdmVuXV0K
KiogJydTaGVsdG9uIFdlZWtseScnIG9mIFtbU2hlbHRvbiwgQ29ubmVjdGljdXR8U2hlbHRvbl1dCioq
ICcnVGhlIFN0cmF0Zm9yZCBCYXJkJycgb2YgW1tTdHJhdGZvcmQsIENvbm5lY3RpY3V0fFN0cmF0Zm9y
ZF1dCioqICcnV2FsbGluZ2ZvcmQgVm9pY2UnJyBvZiBbW1dhbGxpbmdmb3JkLCBDb25uZWN0aWN1dHxX
YWxsaW5nZm9yZF1dCioqICcnV2VzdCBIYXZlbiBOZXdzJycgb2YgW1tXZXN0IEhhdmVuLCBDb25uZWN0
aWN1dHxXZXN0IEhhdmVuXV0KKiBIb3VzYXRvbmljIFB1YmxpY2F0aW9ucyAKKiogJydUaGUgTmV3IE1p
bGZvcmQgVGltZXMnJyB7e1dTfG5ld21pbGZvcmR0aW1lcy5jb219fSBvZiBbW05ldyBNaWxmb3JkLCBD
b25uZWN0aWN1dHxOZXcgTWlsZm9yZF1dCioqICcnVGhlIEJyb29rZmllbGQgSm91cm5hbCcnIG9mIFtb
QnJvb2tmaWVsZCwgQ29ubmVjdGljdXR8QnJvb2tmaWVsZF1dCioqICcnVGhlIEtlbnQgR29vZCBUaW1l
cyBEaXNwYXRjaCcnIG9mIFtbS2VudCwgQ29ubmVjdGljdXR8S2VudF1dCioqICcnVGhlIEJldGhlbCBC
ZWFjb24nJyBvZiBbW0JldGhlbCwgQ29ubmVjdGljdXR8QmV0aGVsXV0KKiogJydUaGUgTGl0Y2hmaWVs
ZCBFbnF1aXJlcicnIG9mIFtbTGl0Y2hmaWVsZCwgQ29ubmVjdGljdXR8TGl0Y2hmaWVsZF1dCioqICcn
TGl0Y2hmaWVsZCBDb3VudHkgVGltZXMnJyBvZiBbW0xpdGNoZmllbGQsIENvbm5lY3RpY3V0fExpdGNo
ZmllbGRdXQoqIEltcHJpbnQgTmV3c3BhcGVycyB7e1dTfGltcHJpbnRuZXdzcGFwZXJzLmNvbX19Cioq
ICcnV2VzdCBIYXJ0Zm9yZCBOZXdzJycgb2YgW1tXZXN0IEhhcnRmb3JkLCBDb25uZWN0aWN1dHxXZXN0
IEhhcnRmb3JkXV0KKiogJydXaW5kc29yIEpvdXJuYWwnJyBvZiBbW1dpbmRzb3IsIENvbm5lY3RpY3V0
fFdpbmRzb3JdXQoqKiAnJ1dpbmRzb3IgTG9ja3MgSm91cm5hbCcnIG9mIFtbV2luZHNvciBMb2Nrcywg
Q29ubmVjdGljdXR8V2luZHNvciBMb2Nrc11dCioqICcnQXZvbiBQb3N0Jycgb2YgW1tBdm9uLCBDb25u
ZWN0aWN1dHxBdm9uXV0KKiogJydGYXJtaW5ndG9uIFBvc3QnJyBvZiBbW0Zhcm1pbmd0b24sIENvbm5l
Y3RpY3V0fEZhcm1pbmd0b25dXQoqKiAnJ1NpbXNidXJ5IFBvc3QnJyBvZiBbW1NpbXNidXJ5LCBDb25u
ZWN0aWN1dHxTaW1zYnVyeV1dCioqICcnVHJpLVRvd24gUG9zdCcnIG9mIFtbQnVybGluZ3RvbiwgQ29u
bmVjdGljdXR8QnVybGluZ3Rvbl1dLCBbW0NhbnRvbiwgQ29ubmVjdGljdXR8Q2FudG9uXV0gYW5kIFtb
SGFyd2ludG9uLCBDb25uZWN0aWN1dHxIYXJ3aW50b25dXQoqIE1pbnV0ZW1hbiBQdWJsaWNhdGlvbnMK
KiogJydbW0ZhaXJmaWVsZCBNaW51dGVtYW5dXScnIG9mIFtbRmFpcmZpZWxkLCBDb25uZWN0aWN1dHxG
YWlyZmllbGRdXQoqKiAnJ1RoZSBXZXN0cG9ydCBNaW51dGVtYW4nJyB7e1dTfHdlc3Rwb3J0bWludXRl
bWFuLmNvbX19IG9mIFtbV2VzdHBvcnQsIENvbm5lY3RpY3V0fFdlc3Rwb3J0XV0KKiBTaG9yZWxpbmUg
TmV3c3BhcGVycyB3ZWVrbGllczoKKiogJydCcmFuZm9yZCBSZXZpZXcnJyBvZiBbW0JyYW5mb3JkLCBD
b25uZWN0aWN1dHxCcmFuZm9yZF1dCioqICcnQ2xpbnRvbiBSZWNvcmRlcicnIG9mIFtbQ2xpbnRvbiwg
Q29ubmVjdGljdXR8Q2xpbnRvbl1dCioqICcnVGhlIERvbHBoaW4nJyBvZiBbW05hdmFsIFN1Ym1hcmlu
ZSBCYXNlIE5ldyBMb25kb25dXSBpbiBbW05ldyBMb25kb24sIENvbm5lY3RpY3V0fE5ldyBMb25kb25d
XQoqKiAnJ01haW4gU3RyZWV0IE5ld3MnJyB7e1dTfGN0bWFpbnN0cmVldG5ld3MuY29tfX0gb2YgW1tF
c3NleCwgQ29ubmVjdGljdXR8RXNzZXhdXQoqKiAnJ1BpY3RvcmlhbCBHYXpldHRlJycgb2YgW1tPbGQg
U2F5YnJvb2ssIENvbm5lY3RpY3V0fE9sZCBTYXlicm9va11dCioqICcnUmVnaW9uYWwgRXhwcmVzcycn
IG9mIFtbQ29sY2hlc3RlciwgQ29ubmVjdGljdXR8Q29sY2hlc3Rlcl1dCioqICcnUmVnaW9uYWwgU3Rh
bmRhcmQnJyBvZiBbW0NvbGNoZXN0ZXIsIENvbm5lY3RpY3V0fENvbGNoZXN0ZXJdXQoqKiAnJ1Nob3Jl
bGluZSBUaW1lcycnIHt7V1N8c2hvcmVsaW5ldGltZXMuY29tfX0gb2YgW1tHdWlsZm9yZCwgQ29ubmVj
dGljdXR8R3VpbGZvcmRdXQoqKiAnJ1Nob3JlIFZpZXcgRWFzdCcnIG9mIFtbTWFkaXNvbiwgQ29ubmVj
dGljdXR8TWFkaXNvbl1dCioqICcnU2hvcmUgVmlldyBXZXN0Jycgb2YgW1tHdWlsZm9yZCwgQ29ubmVj
dGljdXR8R3VpbGZvcmRdXQoqIE90aGVyIHdlZWtsaWVzOgoqKiAnJ1JlZ2lzdHJvJycge3tXU3xyZWdp
c3Ryb2N0LmNvbX19IG9mIFtbTmV3IEhhdmVuLCBDb25uZWN0aWN1dHxOZXcgSGF2ZW5dXQoqKiAnJ1Ro
b21hc3RvbiBFeHByZXNzJycge3tXU3x0aG9tYXN0b3duZXhwcmVzcy5jb219fSBvZiBbW1Rob21hc3Rv
biwgQ29ubmVjdGljdXR8VGhvbWFzdG9uXV0KKiogJydGb290aGlsbHMgVHJhZGVycycnIHt7V1N8Zm9v
dGhpbGxzdHJhZGVyLmNvbX19IG9mIFRvcnJpbmd0b24sIEJyaXN0b2wsIENhbnRvbgoKPT0gTWljaGln
YW4gPT0KRm91ciBkYWlsaWVzLCBhc3NvY2lhdGVkIHdlZWtsaWVzIGFuZCBbW3Blbm55c2F2ZXJdXXMg
aW4gdGhlIHN0YXRlIG9mIFtbTWljaGlnYW5dXTsgYWxzbyBbaHR0cDovL3d3dy5taWNlbnRyYWxob21l
cy5jb20gTUljZW50cmFsaG9tZXMuY29tXSBhbmQgW2h0dHA6Ly93d3cubWljZW50cmFsYXV0b3MuY29t
IE1JY2VudHJhbGF1dG9zLmNvbV0KKiAnJ1tbT2FrbGFuZCBQcmVzc11dJycge3tXU3x0aGVvYWtsYW5k
cHJlc3MuY29tfX0gb2YgW1tPYWtsYW5kLCBNaWNoaWdhbnxPYWtsYW5kXV0KKiAnJ0RhaWx5IFRyaWJ1
bmUnJyB7e1dTfGRhaWx5dHJpYnVuZS5jb219fSBvZiBbW1JveWFsIE9haywgTWljaGlnYW58Um95YWwg
T2FrXV0KKiAnJ01hY29tYiBEYWlseScnIHt7V1N8bWFjb21iZGFpbHkuY29tfX0gb2YgW1tNdC4gQ2xl
bWVucywgTWljaGlnYW58TXQuIENsZW1lbnNdXQoqICcnW1tNb3JuaW5nIFN1bl1dJycge3tXU3x0aGVt
b3JuaW5nc3VuLmNvbX19IG9mICBbW01vdW50IFBsZWFzYW50LCBNaWNoaWdhbnxNb3VudCBQbGVhc2Fu
dF1dCiogSGVyaXRhZ2UgTmV3c3BhcGVycyB7e1dTfGhlcml0YWdlLmNvbX19CioqICcnQmVsbGV2aWxs
ZSBWaWV3JycKKiogJydJbGUgQ2FtZXJhJycKKiogJydNb25yb2UgR3VhcmRpYW4nJwoqKiAnJ1lwc2ls
YW50aSBDb3VyaWVyJycKKiogJydOZXdzLUhlcmFsZCcnCioqICcnUHJlc3MgJiBHdWlkZScnCioqICcn
Q2hlbHNlYSBTdGFuZGFyZCAmIERleHRlciBMZWFkZXInJwoqKiAnJ01hbmNoZXN0ZXIgRW50ZXJwcmlz
ZScnCioqICcnTWlsYW4gTmV3cy1MZWFkZXInJwoqKiAnJ1NhbGluZSBSZXBvcnRlcicnCiogSW5kZXBl
bmRlbnQgTmV3c3BhcGVycyB7e1dTfHNvdXJjZW5ld3NwYXBlcnMuY29tfX0KKiogJydBZHZpc29yJycK
KiogJydTb3VyY2UnJwoqIE1vcm5pbmcgU3RhciB7e1dTfG1vcm5pbmdzdGFycHVibGlzaGluZy5jb219
fQoqKiAnJ0FsbWEgUmVtaW5kZXInJwoqKiAnJ0FscGVuYSBTdGFyJycKKiogJydBbnRyaW0gQ291bnR5
IE5ld3MnJwoqKiAnJ0NhcnNvbiBDaXR5IFJlbWluZGVyJycKKiogJydUaGUgTGVhZGVyICYgS2Fsa2Fz
a2lhbicnCioqICcnT2dlbWF3L09zY29kYSBDb3VudHkgU3RhcicnCioqICcnUGV0b3NrZXkvQ2hhcmxl
dm9peCBTdGFyJycKKiogJydQcmVzcXVlIElzbGUgU3RhcicnCioqICcnUHJldmlldyBDb21tdW5pdHkg
V2Vla2x5JycKKiogJydSb3Njb21tb24gQ291bnR5IFN0YXInJwoqKiAnJ1N0LiBKb2hucyBSZW1pbmRl
cicnCioqICcnU3RyYWl0cyBBcmVhIFN0YXInJwoqKiAnJ1RoZSAoRWRtb3JlKSBBZHZlcnRpc2VyJycg
CiogVm9pY2UgTmV3c3BhcGVycyB7e1dTfHZvaWNlbmV3cy5jb219fQoqKiAnJ0FybWFkYSBUaW1lcycn
CioqICcnQmF5IFZvaWNlJycKKiogJydCbHVlIFdhdGVyIFZvaWNlJycKKiogJydEb3ducml2ZXIgVm9p
Y2UnJwoqKiAnJ01hY29tYiBUb3duc2hpcCBWb2ljZScnCioqICcnTm9ydGggTWFjb21iIFZvaWNlJycK
KiogJydXZWVrZW5kIFZvaWNlJycKKiogJydTdWJ1cmJhbiBMaWZlc3R5bGVzJycge3tXU3xzdWJ1cmJh
bmxpZmVzdHlsZXMuY29tfX0KCj09IE1pZC1IdWRzb24gPT0KT25lIGRhaWx5LCBhc3NvY2lhdGVkIG1h
Z2F6aW5lcyBpbiB0aGUgW1tIdWRzb24gUml2ZXIgVmFsbGV5XV0gb2YgW1tOZXcgWW9ya11dOyBhbHNv
IFtodHRwOi8vd3d3Lm1pZGh1ZHNvbmNlbnRyYWwuY29tIE1pZEh1ZHNvbkNlbnRyYWwuY29tXSBhbmQg
W2h0dHA6Ly93d3cuam9ic2lubmV3eW9yay5jb20gSm9ic0luTmV3WW9yay5jb21dLgoKKiAnJ1tbRGFp
bHkgRnJlZW1hbl1dJycge3tXU3xkYWlseWZyZWVtYW4uY29tfX0gb2YgW1tLaW5nc3RvbiwgTmV3IFlv
cmtdXQoKPT0gT2hpbyA9PQpUd28gZGFpbGllcywgYXNzb2NpYXRlZCBtYWdhemluZXMgYW5kIHRocmVl
IHNoYXJlZCBXZWJzaXRlcywgYWxsIGluIHRoZSBzdGF0ZSBvZiBbW09oaW9dXTogW2h0dHA6Ly93d3cu
YWxsYXJvdW5kY2xldmVsYW5kLmNvbSBBbGxBcm91bmRDbGV2ZWxhbmQuY29tXSwgW2h0dHA6Ly93d3cu
YWxsYXJvdW5kY2xldmVsYW5kY2Fycy5jb20gQWxsQXJvdW5kQ2xldmVsYW5kQ2Fycy5jb21dIGFuZCBb
aHR0cDovL3d3dy5hbGxhcm91bmRjbGV2ZWxhbmRqb2JzLmNvbSBBbGxBcm91bmRDbGV2ZWxhbmRKb2Jz
LmNvbV0uCgoqICcnW1tUaGUgTmV3cy1IZXJhbGQgKE9oaW8pfFRoZSBOZXdzLUhlcmFsZF1dJycge3tX
U3xuZXdzLWhlcmFsZC5jb219fSBvZiBbW1dpbGxvdWdoYnksIE9oaW98V2lsbG91Z2hieV1dCiogJydb
W1RoZSBNb3JuaW5nIEpvdXJuYWxdXScnIHt7V1N8bW9ybmluZ2pvdXJuYWwuY29tfX0gb2YgW1tMb3Jh
aW4sIE9oaW98TG9yYWluXV0KCj09IFBoaWxhZGVscGhpYSBhcmVhID09ClNldmVuIGRhaWxpZXMgYW5k
IGFzc29jaWF0ZWQgd2Vla2xpZXMgYW5kIG1hZ2F6aW5lcyBpbiBbW1Blbm5zeWx2YW5pYV1dIGFuZCBb
W05ldyBKZXJzZXldXSwgYW5kIGFzc29jaWF0ZWQgV2Vic2l0ZXM6IFtodHRwOi8vd3d3LmFsbGFyb3Vu
ZHBoaWxseS5jb20gQWxsQXJvdW5kUGhpbGx5LmNvbV0sIFtodHRwOi8vd3d3LmpvYnNpbm5qLmNvbSBK
b2JzSW5OSi5jb21dLCBbaHR0cDovL3d3dy5qb2JzaW5wYS5jb20gSm9ic0luUEEuY29tXSwgYW5kIFto
dHRwOi8vd3d3LnBoaWxseWNhcnNlYXJjaC5jb20gUGhpbGx5Q2FyU2VhcmNoLmNvbV0uCgoqICcnVGhl
IERhaWx5IExvY2FsJycge3tXU3xkYWlseWxvY2FsLmNvbX19IG9mIFtbV2VzdCBDaGVzdGVyLCBQZW5u
c3lsdmFuaWF8V2VzdCBDaGVzdGVyXV0KKiAnJ1tbRGVsYXdhcmUgQ291bnR5IERhaWx5IGFuZCBTdW5k
YXkgVGltZXNdXSB7e1dTfGRlbGNvdGltZXMuY29tfX0gb2YgUHJpbW9zCiogJydbW1RoZSBNZXJjdXJ5
IChQZW5uc3lsdmFuaWEpfFRoZSBNZXJjdXJ5XV0nJyB7e1dTfHBvdHRzdG93bm1lcmN1cnkuY29tfX0g
b2YgW1tQb3R0c3Rvd24sIFBlbm5zeWx2YW5pYXxQb3R0c3Rvd25dXQoqICcnVGhlIFBob2VuaXgnJyB7
e1dTfHBob2VuaXh2aWxsZW5ld3MuY29tfX0gb2YgW1tQaG9lbml4dmlsbGUsIFBlbm5zeWx2YW5pYXxQ
aG9lbml4dmlsbGVdXQoqICcnW1tUaGUgUmVwb3J0ZXIgKExhbnNkYWxlKXxUaGUgUmVwb3J0ZXJdXScn
IHt7V1N8dGhlcmVwb3J0ZXJvbmxpbmUuY29tfX0gb2YgW1tMYW5zZGFsZSwgUGVubnN5bHZhbmlhfExh
bnNkYWxlXV0KKiAnJ1RoZSBUaW1lcyBIZXJhbGQnJyB7e1dTfHRpbWVzaGVyYWxkLmNvbX19IG9mIFtb
Tm9ycmlzdG93biwgUGVubnN5bHZhbmlhfE5vcnJpc3Rvd25dXQoqICcnW1tUaGUgVHJlbnRvbmlhbl1d
Jycge3tXU3x0cmVudG9uaWFuLmNvbX19IG9mIFtbVHJlbnRvbiwgTmV3IEplcnNleV1dCgoqIFdlZWts
aWVzCioqICcnRWwgTGF0aW5vIEV4cHJlc28nJyBvZiBbW1RyZW50b24sIE5ldyBKZXJzZXldXQoqKiAn
J0xhIFZveicnIG9mIFtbTm9ycmlzdG93biwgUGVubnN5bHZhbmlhXV0KKiogJydUaGUgVmlsbGFnZSBO
ZXdzJycgb2YgW1tEb3duaW5ndG93biwgUGVubnN5bHZhbmlhXV0KKiogJydUaGUgVGltZXMgUmVjb3Jk
Jycgb2YgW1tLZW5uZXR0IFNxdWFyZSwgUGVubnN5bHZhbmlhXV0KKiogJydUaGUgVHJpLUNvdW50eSBS
ZWNvcmQnJyB7e1dTfHRyaWNvdW50eXJlY29yZC5jb219fSBvZiBbW01vcmdhbnRvd24sIFBlbm5zeWx2
YW5pYV1dCioqICcnTmV3cyBvZiBEZWxhd2FyZSBDb3VudHknJyB7e1dTfG5ld3NvZmRlbGF3YXJlY291
bnR5LmNvbX19b2YgW1tIYXZlcnRvd24sIFBlbm5zeWx2YW5pYV1dCioqICcnTWFpbiBMaW5lIFRpbWVz
Jycge3tXU3xtYWlubGluZXRpbWVzLmNvbX19b2YgW1tBcmRtb3JlLCBQZW5uc3lsdmFuaWFdXQoqKiAn
J1Blbm55IFBpbmNoZXInJyBvZiBbW1BvdHRzdG93biwgUGVubnN5bHZhbmlhXV0KKiogJydUb3duIFRh
bGsnJyB7e1dTfHRvd250YWxrbmV3cy5jb219fSBvZiBbW1JpZGxleSwgUGVubnN5bHZhbmlhXV0KKiBD
aGVzYXBlYWtlIFB1Ymxpc2hpbmcge3tXU3xwYThuZXdzZ3JvdXAuY29tfX0gCioqICcnU29sYW5jbyBT
dW4gTGVkZ2VyJycgb2YgW1tRdWFycnl2aWxsZSwgUGVubnN5bHZhbmlhXV0KKiogJydDb2x1bWJpYSBM
ZWRnZXInJyBvZiBbW0NvbHVtYmlhLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ0NvYXRlc3ZpbGxlIExlZGdl
cicnIG9mIFtbRG93bmluZ3Rvd24sIFBlbm5zeWx2YW5pYV1dCioqICcnUGFya2VzYnVyZyBQb3N0IExl
ZGdlcicnIG9mIFtbUXVhcnJ5dmlsbGUsIFBlbm5zeWx2YW5pYV1dCioqICcnRG93bmluZ3Rvd24gTGVk
Z2VyJycgb2YgW1tEb3duaW5ndG93biwgUGVubnN5bHZhbmlhXV0KKiogJydUaGUgS2VubmV0dCBQYXBl
cicnIG9mIFtbS2VubmV0dCBTcXVhcmUsIFBlbm5zeWx2YW5pYV1dCioqICcnQXZvbiBHcm92ZSBTdW4n
JyBvZiBbW1dlc3QgR3JvdmUsIFBlbm5zeWx2YW5pYV1dCioqICcnT3hmb3JkIFRyaWJ1bmUnJyBvZiBb
W094Zm9yZCwgUGVubnN5bHZhbmlhXV0KKiogJydFbGl6YWJldGh0b3duIENocm9uaWNsZScnIG9mIFtb
RWxpemFiZXRodG93biwgUGVubnN5bHZhbmlhXV0KKiogJydEb25lZ2FsIExlZGdlcicnIG9mIFtbRG9u
ZWdhbCwgUGVubnN5bHZhbmlhXV0KKiogJydDaGFkZHMgRm9yZCBQb3N0Jycgb2YgW1tDaGFkZHMgRm9y
ZCwgUGVubnN5bHZhbmlhXV0KKiogJydUaGUgQ2VudHJhbCBSZWNvcmQnJyBvZiBbW01lZGZvcmQsIE5l
dyBKZXJzZXldXQoqKiAnJ01hcGxlIFNoYWRlIFByb2dyZXNzJycgb2YgW1tNYXBsZSBTaGFkZSwgTmV3
IEplcnNleV1dCiogSW50ZXJjb3VudHkgTmV3c3BhcGVycyB7e1dTfGJ1Y2tzbG9jYWxuZXdzLmNvbX19
IAoqKiAnJ1RoZSBSZXZpZXcnJyBvZiBSb3hib3JvdWdoLCBQZW5uc3lsdmFuaWEKKiogJydUaGUgUmVj
b3JkZXInJyBvZiBbW0NvbnNob2hvY2tlbiwgUGVubnN5bHZhbmlhXV0KKiogJydUaGUgTGVhZGVyJycg
b2YgW1tNb3VudCBBaXJ5LCBQZW5uc3lsdmFuaWF8TW91bnQgQWlyeV1dIGFuZCBXZXN0IE9hayBMYWtl
LCBQZW5uc3lsdmFuaWEKKiogJydUaGUgUGVubmluZ3RvbiBQb3N0Jycgb2YgW1tQZW5uaW5ndG9uLCBO
ZXcgSmVyc2V5XV0KKiogJydUaGUgQnJpc3RvbCBQaWxvdCcnIG9mIFtbQnJpc3RvbCwgUGVubnN5bHZh
bmlhXV0KKiogJydZYXJkbGV5IE5ld3MnJyBvZiBbW1lhcmRsZXksIFBlbm5zeWx2YW5pYV1dCioqICcn
TmV3IEhvcGUgR2F6ZXR0ZScnIG9mIFtbTmV3IEhvcGUsIFBlbm5zeWx2YW5pYV1dCioqICcnRG95bGVz
dG93biBQYXRyaW90Jycgb2YgW1tEb3lsZXN0b3duLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ05ld3Rvd24g
QWR2YW5jZScnIG9mIFtbTmV3dG93biwgUGVubnN5bHZhbmlhXV0KKiogJydUaGUgUGxhaW4gRGVhbGVy
Jycgb2YgW1tXaWxsaWFtc3Rvd24sIE5ldyBKZXJzZXldXQoqKiAnJ05ld3MgUmVwb3J0Jycgb2YgW1tT
ZXdlbGwsIE5ldyBKZXJzZXldXQoqKiAnJ1JlY29yZCBCcmVlemUnJyBvZiBbW0JlcmxpbiwgTmV3IEpl
cnNleV1dCioqICcnTmV3c3dlZWtseScnIG9mIFtbTW9vcmVzdG93biwgTmV3IEplcnNleV1dCioqICcn
SGFkZG9uIEhlcmFsZCcnIG9mIFtbSGFkZG9uZmllbGQsIE5ldyBKZXJzZXldXQoqKiAnJ05ldyBFZ3lw
dCBQcmVzcycnIG9mIFtbTmV3IEVneXB0LCBOZXcgSmVyc2V5XV0KKiogJydDb21tdW5pdHkgTmV3cycn
IG9mIFtbUGVtYmVydG9uLCBOZXcgSmVyc2V5XV0KKiogJydQbHltb3V0aCBNZWV0aW5nIEpvdXJuYWwn
JyBvZiBbW1BseW1vdXRoIE1lZXRpbmcsIFBlbm5zeWx2YW5pYV1dCioqICcnTGFmYXlldHRlIEhpbGwg
Sm91cm5hbCcnIG9mIFtbTGFmYXlldHRlIEhpbGwsIFBlbm5zeWx2YW5pYV1dCiogTW9udGdvbWVyeSBO
ZXdzcGFwZXJzIHt7V1N8bW9udGdvbWVyeW5ld3MuY29tfX0gCioqICcnQW1ibGVyIEdhemV0dGUnJyBv
ZiBbW0FtYmxlciwgUGVubnN5bHZhbmlhXV0KKiogJydDZW50cmFsIEJ1Y2tzIExpZmUnJyBvZiBbW0J1
Y2tzIENvdW50eSwgUGVubnN5bHZhbmlhXV0KKiogJydUaGUgQ29sb25pYWwnJyBvZiBbW1BseW1vdXRo
IE1lZXRpbmcsIFBlbm5zeWx2YW5pYV1dCioqICcnR2xlbnNpZGUgTmV3cycnIG9mIFtbR2xlbnNpZGUs
IFBlbm5zeWx2YW5pYV1dCioqICcnVGhlIEdsb2JlJycgb2YgW1tMb3dlciBNb3JlbGFuZCBUb3duc2hp
cCwgUGVubnN5bHZhbmlhXV0KKiogJydNYWluIExpbmUgTGlmZScnIG9mIFtbQXJkbW9yZSwgUGVubnN5
bHZhbmlhXV0KKiogJydNb250Z29tZXJ5IExpZmUnJyBvZiBbW0ZvcnQgV2FzaGluZ3RvbiwgUGVubnN5
bHZhbmlhXV0KKiogJydOb3J0aCBQZW5uIExpZmUnJyBvZiBbW0xhbnNkYWxlLCBQZW5uc3lsdmFuaWFd
XQoqKiAnJ1Blcmthc2llIE5ld3MgSGVyYWxkJycgb2YgW1tQZXJrYXNpZSwgUGVubnN5bHZhbmlhXV0K
KiogJydQdWJsaWMgU3Bpcml0Jycgb2YgW1tIYXRib3JvLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ1NvdWRl
cnRvbiBJbmRlcGVuZGVudCcnIG9mIFtbU291ZGVydG9uLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ1Nwcmlu
Z2ZpZWxkIFN1bicnIG9mIFtbU3ByaW5nZmllbGQsIFBlbm5zeWx2YW5pYV1dCioqICcnU3ByaW5nLUZv
cmQgUmVwb3J0ZXInJyBvZiBbW1JveWVyc2ZvcmQsIFBlbm5zeWx2YW5pYV1dCioqICcnVGltZXMgQ2hy
b25pY2xlJycgb2YgW1tKZW5raW50b3duLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ1ZhbGxleSBJdGVtJycg
b2YgW1tQZXJraW9tZW52aWxsZSwgUGVubnN5bHZhbmlhXV0KKiogJydXaWxsb3cgR3JvdmUgR3VpZGUn
JyBvZiBbW1dpbGxvdyBHcm92ZSwgUGVubnN5bHZhbmlhXV0KKiBOZXdzIEdsZWFuZXIgUHVibGljYXRp
b25zIChjbG9zZWQgRGVjZW1iZXIgMjAwOCkge3tXU3xuZXdzZ2xlYW5lci5jb219fSAKKiogJydMaWZl
IE5ld3NwYXBlcnMnJyBvZiBbW1BoaWxhZGVscGhpYSwgUGVubnN5bHZhbmlhXV0KKiBTdWJ1cmJhbiBQ
dWJsaWNhdGlvbnMKKiogJydUaGUgU3VidXJiYW4gJiBXYXluZSBUaW1lcycnIHt7V1N8d2F5bmVzdWJ1
cmJhbi5jb219fSBvZiBbW1dheW5lLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ1RoZSBTdWJ1cmJhbiBBZHZl
cnRpc2VyJycgb2YgW1tFeHRvbiwgUGVubnN5bHZhbmlhXV0KKiogJydUaGUgS2luZyBvZiBQcnVzc2lh
IENvdXJpZXInJyBvZiBbW0tpbmcgb2YgUHJ1c3NpYSwgUGVubnN5bHZhbmlhXV0KKiBQcmVzcyBOZXdz
cGFwZXJzIHt7V1N8Y291bnR5cHJlc3NvbmxpbmUuY29tfX0gCioqICcnQ291bnR5IFByZXNzJycgb2Yg
W1tOZXd0b3duIFNxdWFyZSwgUGVubnN5bHZhbmlhXV0KKiogJydHYXJuZXQgVmFsbGV5IFByZXNzJycg
b2YgW1tHbGVuIE1pbGxzLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ0hhdmVyZm9yZCBQcmVzcycnIG9mIFtb
TmV3dG93biBTcXVhcmUsIFBlbm5zeWx2YW5pYV1dIChjbG9zZWQgSmFudWFyeSAyMDA5KQoqKiAnJ0hv
bWV0b3duIFByZXNzJycgb2YgW1tHbGVuIE1pbGxzLCBQZW5uc3lsdmFuaWFdXSAoY2xvc2VkIEphbnVh
cnkgMjAwOSkKKiogJydNZWRpYSBQcmVzcycnIG9mIFtbTmV3dG93biBTcXVhcmUsIFBlbm5zeWx2YW5p
YV1dIChjbG9zZWQgSmFudWFyeSAyMDA5KQoqKiAnJ1NwcmluZ2ZpZWxkIFByZXNzJycgb2YgW1tTcHJp
bmdmaWVsZCwgUGVubnN5bHZhbmlhXV0KKiBCZXJrcy1Nb250IE5ld3NwYXBlcnMge3tXU3xiZXJrc21v
bnRuZXdzLmNvbX19IAoqKiAnJ1RoZSBCb3llcnRvd24gQXJlYSBUaW1lcycnIG9mIFtbQm95ZXJ0b3du
LCBQZW5uc3lsdmFuaWFdXQoqKiAnJ1RoZSBLdXR6dG93biBBcmVhIFBhdHJpb3QnJyBvZiBbW0t1dHp0
b3duLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ1RoZSBIYW1idXJnIEFyZWEgSXRlbScnIG9mIFtbSGFtYnVy
ZywgUGVubnN5bHZhbmlhXV0KKiogJydUaGUgU291dGhlcm4gQmVya3MgTmV3cycnIG9mIFtbRXhldGVy
IFRvd25zaGlwLCBCZXJrcyBDb3VudHksIFBlbm5zeWx2YW5pYV1dCioqICcnVGhlIEZyZWUgUHJlc3Mn
JyBvZiBbW1F1YWtlcnRvd24sIFBlbm5zeWx2YW5pYV1dCioqICcnVGhlIFNhdWNvbiBOZXdzJycgb2Yg
W1tRdWFrZXJ0b3duLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ1dlc3RzaWRlIFdlZWtseScnIG9mIFtbUmVh
ZGluZywgUGVubnN5bHZhbmlhXV0KCiogTWFnYXppbmVzCioqICcnQnVja3MgQ28uIFRvd24gJiBDb3Vu
dHJ5IExpdmluZycnCioqICcnQ2hlc3RlciBDby4gVG93biAmIENvdW50cnkgTGl2aW5nJycKKiogJydN
b250b21nZXJ5IENvLiBUb3duICYgQ291bnRyeSBMaXZpbmcnJwoqKiAnJ0dhcmRlbiBTdGF0ZSBUb3du
ICYgQ291bnRyeSBMaXZpbmcnJwoqKiAnJ01vbnRnb21lcnkgSG9tZXMnJwoqKiAnJ1BoaWxhZGVscGhp
YSBHb2xmZXInJwoqKiAnJ1BhcmVudHMgRXhwcmVzcycnCioqICcnQXJ0IE1hdHRlcnMnJwoKe3tKUkN9
fQoKPT1SZWZlcmVuY2VzPT0KPHJlZmVyZW5jZXMgLz4KCltbQ2F0ZWdvcnk6Sm91cm5hbCBSZWdpc3Rl
ciBwdWJsaWNhdGlvbnN8Kl1dCg==
"""

func DATA_speedtest1_InputStream() -> InputStream {
    let decodedData = Data(base64Encoded: encodedString, options: .ignoreUnknownCharacters)!
    return InputStream(data: decodedData)
}
