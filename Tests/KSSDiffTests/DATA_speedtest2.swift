// This file is automatically generated by generate_resource_file.sh. DO NOT EDIT!

import Foundation

fileprivate let encodedString = """
VGhpcyBpcyBhICcnJ2xpc3Qgb2YgbmV3c3BhcGVycyBwdWJsaXNoZWQgYnkgW1tKb3VybmFsIFJlZ2lz
dGVyIENvbXBhbnldXScnJy4KClRoZSBjb21wYW55IG93bnMgZGFpbHkgYW5kIHdlZWtseSBuZXdzcGFw
ZXJzLCBvdGhlciBwcmludCBtZWRpYSBwcm9wZXJ0aWVzIGFuZCBuZXdzcGFwZXItYWZmaWxpYXRlZCBs
b2NhbCBXZWJzaXRlcyBpbiB0aGUgW1tVLlMuXV0gc3RhdGVzIG9mIFtbQ29ubmVjdGljdXRdXSwgW1tN
aWNoaWdhbl1dLCBbW05ldyBZb3JrXV0sIFtbT2hpb11dLCBbW1Blbm5zeWx2YW5pYV1dIGFuZCBbW05l
dyBKZXJzZXldXSwgb3JnYW5pemVkIGluIHNpeCBnZW9ncmFwaGljICJjbHVzdGVycyI6PHJlZj5baHR0
cDovL3d3dy5qb3VybmFscmVnaXN0ZXIuY29tL3B1YmxpY2F0aW9ucy5odG1sIEpvdXJuYWwgUmVnaXN0
ZXIgQ29tcGFueTogT3VyIFB1YmxpY2F0aW9uc10sIGFjY2Vzc2VkIEFwcmlsIDIxLCAyMDEwLjwvcmVm
PgoKPT0gQ2FwaXRhbC1TYXJhdG9nYSA9PQpUaHJlZSBkYWlsaWVzLCBhc3NvY2lhdGVkIHdlZWtsaWVz
IGFuZCBbW3Blbm55c2F2ZXJdXXMgaW4gZ3JlYXRlciBbW0FsYmFueSwgTmV3IFlvcmtdXTsgYWxzbyBb
aHR0cDovL3d3dy5jYXBpdGFsY2VudHJhbC5jb20gY2FwaXRhbGNlbnRyYWwuY29tXSBhbmQgW2h0dHA6
Ly93d3cuam9ic2lubmV3eW9yay5jb20gSm9ic0luTmV3WW9yay5jb21dLgoKKiAnJ1RoZSBPbmVpZGEg
RGFpbHkgRGlzcGF0Y2gnJyB7e1dTfG9uZWlkYWRpc3BhdGNoLmNvbX19IG9mIFtbT25laWRhLCBOZXcg
WW9ya11dCiogJydbW1RoZSBSZWNvcmQgKFRyb3kpfFRoZSBSZWNvcmRdXScnIHt7V1N8dHJveXJlY29y
ZC5jb219fSBvZiBbW1Ryb3ksIE5ldyBZb3JrXV0KKiAnJ1tbVGhlIFNhcmF0b2dpYW5dXScnIHt7V1N8
c2FyYXRvZ2lhbi5jb219fSBvZiBbW1NhcmF0b2dhIFNwcmluZ3MsIE5ldyBZb3JrXV0KKiBXZWVrbGll
czoKKiogJydDb21tdW5pdHkgTmV3cycnIHt7V1N8Y253ZWVrbHkuY29tfX0gd2Vla2x5IG9mIFtbQ2xp
ZnRvbiBQYXJrLCBOZXcgWW9ya11dCioqICcnUm9tZSBPYnNlcnZlcicnIHt7V1N8cm9tZW9ic2VydmVy
LmNvbX19IG9mIFtbUm9tZSwgTmV3IFlvcmtdXQoqKiAnJ1dHIExpZmUgJycge3tXU3xzYXJhdG9naWFu
LmNvbS93Z2xpZmUvfX0gb2YgW1tXaWx0b24sIE5ldyBZb3JrXV0KKiogJydCYWxsc3RvbiBTcGEgTGlm
ZSAnJyB7e1dTfHNhcmF0b2dpYW4uY29tL2JzcGFsaWZlfX0gb2YgW1tCYWxsc3RvbiBTcGEsIE5ldyBZ
b3JrXV0KKiogJydHcmVlbmJ1c2ggTGlmZScnIHt7V1N8dHJveXJlY29yZC5jb20vZ3JlZW5idXNofX0g
b2YgW1tUcm95LCBOZXcgWW9ya11dCioqICcnTGF0aGFtIExpZmUnJyB7e1dTfHRyb3lyZWNvcmQuY29t
L2xhdGhhbX19IG9mIFtbTGF0aGFtLCBOZXcgWW9ya11dCioqICcnUml2ZXIgTGlmZScnIHt7V1N8dHJv
eXJlY29yZC5jb20vcml2ZXJ9fSBvZiBbW1Ryb3ksIE5ldyBZb3JrXV0KCj09IENvbm5lY3RpY3V0ID09
ClRocmVlIGRhaWxpZXMsIGFzc29jaWF0ZWQgd2Vla2xpZXMgYW5kIFtbcGVubnlzYXZlcl1dcyBpbiB0
aGUgc3RhdGUgb2YgW1tDb25uZWN0aWN1dF1dOyBhbHNvIFtodHRwOi8vd3d3LmN0Y2VudHJhbC5jb20g
Q1RjZW50cmFsLmNvbV0sIFtodHRwOi8vd3d3LmN0Y2Fyc2FuZHRydWNrcy5jb20gQ1RDYXJzQW5kVHJ1
Y2tzLmNvbV0gYW5kIFtodHRwOi8vd3d3LmpvYnNpbmN0LmNvbSBKb2JzSW5DVC5jb21dLgoKKiAnJ1Ro
ZSBNaWRkbGV0b3duIFByZXNzJycge3tXU3xtaWRkbGV0b3ducHJlc3MuY29tfX0gb2YgW1tNaWRkbGV0
b3duLCBDb25uZWN0aWN1dHxNaWRkbGV0b3duXV0KKiAnJ1tbTmV3IEhhdmVuIFJlZ2lzdGVyXV0nJyB7
e1dTfG5ld2hhdmVucmVnaXN0ZXIuY29tfX0gb2YgW1tOZXcgSGF2ZW4sIENvbm5lY3RpY3V0fE5ldyBI
YXZlbl1dCiogJydUaGUgUmVnaXN0ZXIgQ2l0aXplbicnIHt7V1N8cmVnaXN0ZXJjaXRpemVuLmNvbX19
IG9mIFtbVG9ycmluZ3RvbiwgQ29ubmVjdGljdXR8VG9ycmluZ3Rvbl1dCgoqIEhvdXNhdG9uaWMgUHVi
bGljYXRpb25zIAoqKiAnJ1RoZSBIb3VzYXRvbmljIFRpbWVzJycge3tXU3xob3VzYXRvbmljdGltZXMu
Y29tfX0gb2YgW1tOZXcgTWlsZm9yZCwgQ29ubmVjdGljdXR8TmV3IE1pbGZvcmRdXQoqKiAnJ0xpdGNo
ZmllbGQgQ291bnR5IFRpbWVzJycge3tXU3xjb3VudHl0aW1lcy5jb219fSBvZiBbW0xpdGNoZmllbGQs
IENvbm5lY3RpY3V0fExpdGNoZmllbGRdXQoKKiBNaW51dGVtYW4gUHVibGljYXRpb25zCioqICcnW1tG
YWlyZmllbGQgTWludXRlbWFuXV0nJyB7e1dTfGZhaXJmaWVsZG1pbnV0ZW1hbi5jb219fW9mIFtbRmFp
cmZpZWxkLCBDb25uZWN0aWN1dHxGYWlyZmllbGRdXQoqKiAnJ1RoZSBXZXN0cG9ydCBNaW51dGVtYW4n
JyB7e1dTfHdlc3Rwb3J0bWludXRlbWFuLmNvbX19IG9mIFtbV2VzdHBvcnQsIENvbm5lY3RpY3V0fFdl
c3Rwb3J0XV0KCiogU2hvcmVsaW5lIE5ld3NwYXBlcnMgCioqICcnVGhlIERvbHBoaW4nJyB7e1dTfGRv
bHBoaW4tbmV3cy5jb219fSBvZiBbW05hdmFsIFN1Ym1hcmluZSBCYXNlIE5ldyBMb25kb25dXSBpbiBb
W05ldyBMb25kb24sIENvbm5lY3RpY3V0fE5ldyBMb25kb25dXQoqKiAnJ1Nob3JlbGluZSBUaW1lcycn
IHt7V1N8c2hvcmVsaW5ldGltZXMuY29tfX0gb2YgW1tHdWlsZm9yZCwgQ29ubmVjdGljdXR8R3VpbGZv
cmRdXQoKKiBGb290aGlsbHMgTWVkaWEgR3JvdXAge3tXU3xmb290aGlsbHNtZWRpYWdyb3VwLmNvbX19
CioqICcnVGhvbWFzdG9uIEV4cHJlc3MnJyB7e1dTfHRob21hc3RvbmV4cHJlc3MuY29tfX0gb2YgW1tU
aG9tYXN0b24sIENvbm5lY3RpY3V0fFRob21hc3Rvbl1dCioqICcnR29vZCBOZXdzIEFib3V0IFRvcnJp
bmd0b24nJyB7e1dTfGdvb2RuZXdzYWJvdXR0b3JyaW5ndG9uLmNvbX19IG9mIFtbVG9ycmluZ3Rvbiwg
Q29ubmVjdGljdXR8VG9ycmluZ3Rvbl1dCioqICcnR3JhbmJ5IE5ld3MnJyB7e1dTfGZvb3RoaWxsc21l
ZGlhZ3JvdXAuY29tL2dyYW5ieX19IG9mIFtbR3JhbmJ5LCBDb25uZWN0aWN1dHxHcmFuYnldXQoqKiAn
J0NhbnRvbiBOZXdzJycge3tXU3xmb290aGlsbHNtZWRpYWdyb3VwLmNvbS9jYW50b259fSBvZiBbW0Nh
bnRvbiwgQ29ubmVjdGljdXR8Q2FudG9uXV0KKiogJydBdm9uIE5ld3MnJyB7e1dTfGZvb3RoaWxsc21l
ZGlhZ3JvdXAuY29tL2F2b259fSBvZiBbW0F2b24sIENvbm5lY3RpY3V0fEF2b25dXQoqKiAnJ1NpbXNi
dXJ5IE5ld3MnJyB7e1dTfGZvb3RoaWxsc21lZGlhZ3JvdXAuY29tL3NpbXNidXJ5fX0gb2YgW1tTaW1z
YnVyeSwgQ29ubmVjdGljdXR8U2ltc2J1cnldXQoqKiAnJ0xpdGNoZmllbGQgTmV3cycnIHt7V1N8Zm9v
dGhpbGxzbWVkaWFncm91cC5jb20vbGl0Y2hmaWVsZH19IG9mIFtbTGl0Y2hmaWVsZCwgQ29ubmVjdGlj
dXR8TGl0Y2hmaWVsZF1dCioqICcnRm9vdGhpbGxzIFRyYWRlcicnIHt7V1N8Zm9vdGhpbGxzdHJhZGVy
LmNvbX19IG9mIFRvcnJpbmd0b24sIEJyaXN0b2wsIENhbnRvbgoKKiBPdGhlciB3ZWVrbGllcwoqKiAn
J1RoZSBNaWxmb3JkLU9yYW5nZSBCdWxsZXRpbicnIHt7V1N8Y3RidWxsZXRpbi5jb219fSBvZiBbW09y
YW5nZSwgQ29ubmVjdGljdXR8T3JhbmdlXV0KKiogJydUaGUgUG9zdC1DaHJvbmljbGUnJyB7e1dTfGN0
cG9zdGNocm9uaWNsZS5jb219fSBvZiBbW05vcnRoIEhhdmVuLCBDb25uZWN0aWN1dHxOb3J0aCBIYXZl
bl1dCioqICcnV2VzdCBIYXJ0Zm9yZCBOZXdzJycge3tXU3x3ZXN0aGFydGZvcmRuZXdzLmNvbX19IG9m
IFtbV2VzdCBIYXJ0Zm9yZCwgQ29ubmVjdGljdXR8V2VzdCBIYXJ0Zm9yZF1dCgoqIE1hZ2F6aW5lcwoq
KiAnJ1RoZSBDb25uZWN0aWN1dCBCcmlkZScnIHt7V1N8Y29ubmVjdGljdXRtYWcuY29tfX0KKiogJydD
b25uZWN0aWN1dCBNYWdhemluZScnIHt7V1N8dGhlY29ubmVjdGljdXRicmlkZS5jb219fQoqKiAnJ1Bh
c3Nwb3J0IE1hZ2F6aW5lJycge3tXU3xwYXNzcG9ydC1tYWcuY29tfX0KCj09IE1pY2hpZ2FuID09CkZv
dXIgZGFpbGllcywgYXNzb2NpYXRlZCB3ZWVrbGllcyBhbmQgW1twZW5ueXNhdmVyXV1zIGluIHRoZSBz
dGF0ZSBvZiBbW01pY2hpZ2FuXV07IGFsc28gW2h0dHA6Ly93d3cubWljZW50cmFsaG9tZXMuY29tIE1J
Y2VudHJhbGhvbWVzLmNvbV0gYW5kIFtodHRwOi8vd3d3Lm1pY2VudHJhbGF1dG9zLmNvbSBNSWNlbnRy
YWxhdXRvcy5jb21dCiogJydbW09ha2xhbmQgUHJlc3NdXScnIHt7V1N8dGhlb2FrbGFuZHByZXNzLmNv
bX19IG9mIFtbT2FrbGFuZCwgTWljaGlnYW58T2FrbGFuZF1dCiogJydEYWlseSBUcmlidW5lJycge3tX
U3xkYWlseXRyaWJ1bmUuY29tfX0gb2YgW1tSb3lhbCBPYWssIE1pY2hpZ2FufFJveWFsIE9ha11dCiog
JydNYWNvbWIgRGFpbHknJyB7e1dTfG1hY29tYmRhaWx5LmNvbX19IG9mIFtbTXQuIENsZW1lbnMsIE1p
Y2hpZ2FufE10LiBDbGVtZW5zXV0KKiAnJ1tbTW9ybmluZyBTdW5dXScnIHt7V1N8dGhlbW9ybmluZ3N1
bi5jb219fSBvZiAgW1tNb3VudCBQbGVhc2FudCwgTWljaGlnYW58TW91bnQgUGxlYXNhbnRdXQoKKiBI
ZXJpdGFnZSBOZXdzcGFwZXJzIHt7V1N8aGVyaXRhZ2UuY29tfX0KKiogJydCZWxsZXZpbGxlIFZpZXcn
JyB7e1dTfGJlbGxldmlsbGV2aWV3LmNvbX19CioqICcnSWxlIENhbWVyYScnIHt7V1N8dGhlbmV3c2hl
cmFsZC5jb20vaWxlX2NhbWVyYX19CioqICcnTW9ucm9lIEd1YXJkaWFuJycgIHt7V1N8bW9ucmVndWFy
ZGlhbi5jb219fQoqKiAnJ1lwc2lsYW50aSBDb3VyaWVyJycge3tXU3x5cHNpbGFudGljb3VyaWVyLmNv
bX19CioqICcnTmV3cy1IZXJhbGQnJyB7e1dTfHRoZW5ld3NoZXJhbGQuY29tfX0KKiogJydQcmVzcyAm
IEd1aWRlJycge3tXU3xwcmVzc2FuZGd1aWRlLmNvbX19CioqICcnQ2hlbHNlYSBTdGFuZGFyZCAmIERl
eHRlciBMZWFkZXInJyB7e1dTfGNoZWxzZWFzdGFuZGFyZC5jb219fQoqKiAnJ01hbmNoZXN0ZXIgRW50
ZXJwcmlzZScnIHt7V1N8bWFuY2hlc3Rlcmd1YXJkaWFuLmNvbX19CioqICcnTWlsYW4gTmV3cy1MZWFk
ZXInJyB7e1dTfG1pbGFubmV3cy5jb219fQoqKiAnJ1NhbGluZSBSZXBvcnRlcicnIHt7V1N8c2FsaW5l
cmVwb3J0ZXIuY29tfX0KKiBJbmRlcGVuZGVudCBOZXdzcGFwZXJzIAoqKiAnJ0Fkdmlzb3InJyB7e1dT
fHNvdXJjZW5ld3NwYXBlcnMuY29tfX0KKiogJydTb3VyY2UnJyB7e1dTfHNvdXJjZW5ld3NwYXBlcnMu
Y29tfX0KKiBNb3JuaW5nIFN0YXIge3tXU3xtb3JuaW5nc3RhcnB1Ymxpc2hpbmcuY29tfX0KKiogJydU
aGUgTGVhZGVyICYgS2Fsa2Fza2lhbicnIHt7V1N8bGVhZGVyYW5ka2Fsa2Fza2lhbi5jb219fQoqKiAn
J0dyYW5kIFRyYXZlcnNlIEluc2lkZXInJyB7e1dTfGdyYW5kdHJhdmVyc2VpbnNpZGVyLmNvbX19Cioq
ICcnQWxtYSBSZW1pbmRlcicnCioqICcnQWxwZW5hIFN0YXInJwoqKiAnJ09nZW1hdy9Pc2NvZGEgQ291
bnR5IFN0YXInJwoqKiAnJ1ByZXNxdWUgSXNsZSBTdGFyJycKKiogJydTdC4gSm9obnMgUmVtaW5kZXIn
JwoKKiBWb2ljZSBOZXdzcGFwZXJzIHt7V1N8dm9pY2VuZXdzLmNvbX19CioqICcnQXJtYWRhIFRpbWVz
JycKKiogJydCYXkgVm9pY2UnJwoqKiAnJ0JsdWUgV2F0ZXIgVm9pY2UnJwoqKiAnJ0Rvd25yaXZlciBW
b2ljZScnCioqICcnTWFjb21iIFRvd25zaGlwIFZvaWNlJycKKiogJydOb3J0aCBNYWNvbWIgVm9pY2Un
JwoqKiAnJ1dlZWtlbmQgVm9pY2UnJwoKPT0gTWlkLUh1ZHNvbiA9PQpPbmUgZGFpbHksIGFzc29jaWF0
ZWQgbWFnYXppbmVzIGluIHRoZSBbW0h1ZHNvbiBSaXZlciBWYWxsZXldXSBvZiBbW05ldyBZb3JrXV07
IGFsc28gW2h0dHA6Ly93d3cubWlkaHVkc29uY2VudHJhbC5jb20gTWlkSHVkc29uQ2VudHJhbC5jb21d
IGFuZCBbaHR0cDovL3d3dy5qb2JzaW5uZXd5b3JrLmNvbSBKb2JzSW5OZXdZb3JrLmNvbV0uCgoqICcn
W1tEYWlseSBGcmVlbWFuXV0nJyB7e1dTfGRhaWx5ZnJlZW1hbi5jb219fSBvZiBbW0tpbmdzdG9uLCBO
ZXcgWW9ya11dCiogJydMYXMgTm90aWNpYXMnJyB7e1dTfGxhc25vdGljaWFzbnkuY29tfX0gb2YgW1tL
aW5nc3RvbiwgTmV3IFlvcmtdXQoKPT0gT2hpbyA9PQpUd28gZGFpbGllcywgYXNzb2NpYXRlZCBtYWdh
emluZXMgYW5kIHRocmVlIHNoYXJlZCBXZWJzaXRlcywgYWxsIGluIHRoZSBzdGF0ZSBvZiBbW09oaW9d
XTogW2h0dHA6Ly93d3cuYWxsYXJvdW5kY2xldmVsYW5kLmNvbSBBbGxBcm91bmRDbGV2ZWxhbmQuY29t
XSwgW2h0dHA6Ly93d3cuYWxsYXJvdW5kY2xldmVsYW5kY2Fycy5jb20gQWxsQXJvdW5kQ2xldmVsYW5k
Q2Fycy5jb21dIGFuZCBbaHR0cDovL3d3dy5hbGxhcm91bmRjbGV2ZWxhbmRqb2JzLmNvbSBBbGxBcm91
bmRDbGV2ZWxhbmRKb2JzLmNvbV0uCgoqICcnW1tUaGUgTmV3cy1IZXJhbGQgKE9oaW8pfFRoZSBOZXdz
LUhlcmFsZF1dJycge3tXU3xuZXdzLWhlcmFsZC5jb219fSBvZiBbW1dpbGxvdWdoYnksIE9oaW98V2ls
bG91Z2hieV1dCiogJydbW1RoZSBNb3JuaW5nIEpvdXJuYWxdXScnIHt7V1N8bW9ybmluZ2pvdXJuYWwu
Y29tfX0gb2YgW1tMb3JhaW4sIE9oaW98TG9yYWluXV0KKiAnJ0VsIExhdGlubyBFeHByZXNvJycge3tX
U3xsb3JhaW5sYXRpbm8uY29tfX0gb2YgW1tMb3JhaW4sIE9oaW98TG9yYWluXV0KCj09IFBoaWxhZGVs
cGhpYSBhcmVhID09ClNldmVuIGRhaWxpZXMgYW5kIGFzc29jaWF0ZWQgd2Vla2xpZXMgYW5kIG1hZ2F6
aW5lcyBpbiBbW1Blbm5zeWx2YW5pYV1dIGFuZCBbW05ldyBKZXJzZXldXSwgYW5kIGFzc29jaWF0ZWQg
V2Vic2l0ZXM6IFtodHRwOi8vd3d3LmFsbGFyb3VuZHBoaWxseS5jb20gQWxsQXJvdW5kUGhpbGx5LmNv
bV0sIFtodHRwOi8vd3d3LmpvYnNpbm5qLmNvbSBKb2JzSW5OSi5jb21dLCBbaHR0cDovL3d3dy5qb2Jz
aW5wYS5jb20gSm9ic0luUEEuY29tXSwgYW5kIFtodHRwOi8vd3d3LnBoaWxseWNhcnNlYXJjaC5jb20g
UGhpbGx5Q2FyU2VhcmNoLmNvbV0uCgoqICcnW1tUaGUgRGFpbHkgTG9jYWwgTmV3c11dJycge3tXU3xk
YWlseWxvY2FsLmNvbX19IG9mIFtbV2VzdCBDaGVzdGVyLCBQZW5uc3lsdmFuaWF8V2VzdCBDaGVzdGVy
XV0KKiAnJ1tbRGVsYXdhcmUgQ291bnR5IERhaWx5IGFuZCBTdW5kYXkgVGltZXNdXSB7e1dTfGRlbGNv
dGltZXMuY29tfX0gb2YgUHJpbW9zIFtbVXBwZXIgRGFyYnkgVG93bnNoaXAsIFBlbm5zeWx2YW5pYV1d
CiogJydbW1RoZSBNZXJjdXJ5IChQZW5uc3lsdmFuaWEpfFRoZSBNZXJjdXJ5XV0nJyB7e1dTfHBvdHRz
dG93bm1lcmN1cnkuY29tfX0gb2YgW1tQb3R0c3Rvd24sIFBlbm5zeWx2YW5pYXxQb3R0c3Rvd25dXQoq
ICcnW1tUaGUgUmVwb3J0ZXIgKExhbnNkYWxlKXxUaGUgUmVwb3J0ZXJdXScnIHt7V1N8dGhlcmVwb3J0
ZXJvbmxpbmUuY29tfX0gb2YgW1tMYW5zZGFsZSwgUGVubnN5bHZhbmlhfExhbnNkYWxlXV0KKiAnJ1Ro
ZSBUaW1lcyBIZXJhbGQnJyB7e1dTfHRpbWVzaGVyYWxkLmNvbX19IG9mIFtbTm9ycmlzdG93biwgUGVu
bnN5bHZhbmlhfE5vcnJpc3Rvd25dXQoqICcnW1tUaGUgVHJlbnRvbmlhbl1dJycge3tXU3x0cmVudG9u
aWFuLmNvbX19IG9mIFtbVHJlbnRvbiwgTmV3IEplcnNleV1dCgoqIFdlZWtsaWVzCiogJydUaGUgUGhv
ZW5peCcnIHt7V1N8cGhvZW5peHZpbGxlbmV3cy5jb219fSBvZiBbW1Bob2VuaXh2aWxsZSwgUGVubnN5
bHZhbmlhXV0KKiogJydFbCBMYXRpbm8gRXhwcmVzbycnIHt7V1N8bmpleHByZXNvLmNvbX19IG9mIFtb
VHJlbnRvbiwgTmV3IEplcnNleV1dCioqICcnTGEgVm96Jycge3tXU3xsYXZvenBhLmNvbX19IG9mIFtb
Tm9ycmlzdG93biwgUGVubnN5bHZhbmlhXV0KKiogJydUaGUgVHJpIENvdW50eSBSZWNvcmQnJyB7e1dT
fHRyaWNvdW50eXJlY29yZC5jb219fSBvZiBbW01vcmdhbnRvd24sIFBlbm5zeWx2YW5pYV1dCioqICcn
UGVubnkgUGluY2hlcicnIHt7V1N8cGVubnlwaW5jaGVycGEuY29tfX1vZiBbW1BvdHRzdG93biwgUGVu
bnN5bHZhbmlhXV0KCiogQ2hlc2FwZWFrZSBQdWJsaXNoaW5nICB7e1dTfHNvdXRoZXJuY2hlc3RlcmNv
dW50eXdlZWtsaWVzLmNvbX19CioqICcnVGhlIEtlbm5ldHQgUGFwZXInJyB7e1dTfGtlbm5ldHRwYXBl
ci5jb219fSBvZiBbW0tlbm5ldHQgU3F1YXJlLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ0F2b24gR3JvdmUg
U3VuJycge3tXU3xhdm9uZ3JvdmVzdW4uY29tfX0gb2YgW1tXZXN0IEdyb3ZlLCBQZW5uc3lsdmFuaWFd
XQoqKiAnJ1RoZSBDZW50cmFsIFJlY29yZCcnIHt7V1N8bWVkZm9yZGNlbnRyYWxyZWNvcmQuY29tfX0g
b2YgW1tNZWRmb3JkLCBOZXcgSmVyc2V5XV0KKiogJydNYXBsZSBTaGFkZSBQcm9ncmVzcycnIHt7V1N8
bWFwbGVzaGFkZXByb2dyZXNzLmNvbX19IG9mIFtbTWFwbGUgU2hhZGUsIE5ldyBKZXJzZXldXQoKKiBJ
bnRlcmNvdW50eSBOZXdzcGFwZXJzIHt7V1N8YnVja3Nsb2NhbG5ld3MuY29tfX0ge3tXU3xzb3V0aGpl
cnNleWxvY2FsbmV3cy5jb219fSAKKiogJydUaGUgUGVubmluZ3RvbiBQb3N0Jycge3tXU3xwZW5uaW5n
dG9ucG9zdC5jb219fSBvZiBbW1Blbm5pbmd0b24sIE5ldyBKZXJzZXldXQoqKiAnJ1RoZSBCcmlzdG9s
IFBpbG90Jycge3tXU3xicmlzdG9scGlsb3QuY29tfX0gb2YgW1tCcmlzdG9sLCBQZW5uc3lsdmFuaWFd
XQoqKiAnJ1lhcmRsZXkgTmV3cycnIHt7V1N8eWFyZGxleW5ld3MuY29tfX0gb2YgW1tZYXJkbGV5LCBQ
ZW5uc3lsdmFuaWFdXQoqKiAnJ0FkdmFuY2Ugb2YgQnVja3MgQ291bnR5Jycge3tXU3xhZHZhbmNlb2Zi
dWNrcy5jb219fSBvZiBbW05ld3Rvd24sIFBlbm5zeWx2YW5pYV1dCioqICcnUmVjb3JkIEJyZWV6ZScn
IHt7V1N8cmVjb3JkYnJlZXplLmNvbX19IG9mIFtbQmVybGluLCBOZXcgSmVyc2V5XV0KKiogJydDb21t
dW5pdHkgTmV3cycnIHt7V1N8c2pjb21tdW5pdHluZXdzLmNvbX19IG9mIFtbUGVtYmVydG9uLCBOZXcg
SmVyc2V5XV0KCiogTW9udGdvbWVyeSBOZXdzcGFwZXJzIHt7V1N8bW9udGdvbWVyeW5ld3MuY29tfX0g
CioqICcnQW1ibGVyIEdhemV0dGUnJyB7e1dTfGFtYmxlcmdhemV0dGUuY29tfX0gb2YgW1tBbWJsZXIs
IFBlbm5zeWx2YW5pYV1dCioqICcnVGhlIENvbG9uaWFsJycge3tXU3xjb2xvbmlhbG5ld3MuY29tfX0g
b2YgW1tQbHltb3V0aCBNZWV0aW5nLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ0dsZW5zaWRlIE5ld3MnJyB7
e1dTfGdsZW5zaWRlbmV3cy5jb219fSBvZiBbW0dsZW5zaWRlLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ1Ro
ZSBHbG9iZScnIHt7V1N8Z2xvYmVuZXdzcGFwZXIuY29tfX0gb2YgW1tMb3dlciBNb3JlbGFuZCBUb3du
c2hpcCwgUGVubnN5bHZhbmlhXV0KKiogJydNb250Z29tZXJ5IExpZmUnJyB7e1dTfG1vbnRnb21lcnls
aWZlLmNvbX19IG9mIFtbRm9ydCBXYXNoaW5ndG9uLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ05vcnRoIFBl
bm4gTGlmZScnIHt7V1N8bm9ydGhwZW5ubGlmZS5jb219fSBvZiBbW0xhbnNkYWxlLCBQZW5uc3lsdmFu
aWFdXQoqKiAnJ1Blcmthc2llIE5ld3MgSGVyYWxkJycge3tXU3xwZXJrYXNpZW5ld3NoZXJhbGQuY29t
fX0gb2YgW1tQZXJrYXNpZSwgUGVubnN5bHZhbmlhXV0KKiogJydQdWJsaWMgU3Bpcml0Jycge3tXU3x0
aGVwdWJsaWNzcGlyaXQuY29tfX0gb2YgW1tIYXRib3JvLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ1NvdWRl
cnRvbiBJbmRlcGVuZGVudCcnIHt7V1N8c291ZGVydG9uaW5kZXBlbmRlbnQuY29tfX0gb2YgW1tTb3Vk
ZXJ0b24sIFBlbm5zeWx2YW5pYV1dCioqICcnU3ByaW5nZmllbGQgU3VuJycge3tXU3xzcHJpbmdmaWVs
ZHN1bi5jb219fSBvZiBbW1NwcmluZ2ZpZWxkLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ1NwcmluZy1Gb3Jk
IFJlcG9ydGVyJycge3tXU3xzcHJpbmdmb3JkcmVwb3J0ZXIuY29tfX0gb2YgW1tSb3llcnNmb3JkLCBQ
ZW5uc3lsdmFuaWFdXQoqKiAnJ1RpbWVzIENocm9uaWNsZScnIHt7V1N8dGhldGltZXNjaHJvbmljbGUu
Y29tfX0gb2YgW1tKZW5raW50b3duLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ1ZhbGxleSBJdGVtJycge3tX
U3x2YWxsZXlpdGVtLmNvbX19IG9mIFtbUGVya2lvbWVudmlsbGUsIFBlbm5zeWx2YW5pYV1dCioqICcn
V2lsbG93IEdyb3ZlIEd1aWRlJycge3tXU3x3aWxsb3dncm92ZWd1aWRlLmNvbX19IG9mIFtbV2lsbG93
IEdyb3ZlLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ1RoZSBSZXZpZXcnJyB7e1dTfHJveHJldmlldy5jb219
fSBvZiBbW1JveGJvcm91Z2gsIFBoaWxhZGVscGhpYSwgUGVubnN5bHZhbmlhXV0KCiogTWFpbiBMaW5l
IE1lZGlhIE5ld3Mge3tXU3xtYWlubGluZW1lZGlhbmV3cy5jb219fQoqKiAnJ01haW4gTGluZSBUaW1l
cycnIHt7V1N8bWFpbmxpbmV0aW1lcy5jb219fSBvZiBbW0FyZG1vcmUsIFBlbm5zeWx2YW5pYV1dCioq
ICcnTWFpbiBMaW5lIExpZmUnJyB7e1dTfG1haW5saW5lbGlmZS5jb219fSBvZiBbW0FyZG1vcmUsIFBl
bm5zeWx2YW5pYV1dCioqICcnVGhlIEtpbmcgb2YgUHJ1c3NpYSBDb3VyaWVyJycge3tXU3xraW5nb2Zw
cnVzc2lhY291cmllci5jb219fSBvZiBbW0tpbmcgb2YgUHJ1c3NpYSwgUGVubnN5bHZhbmlhXV0KCiog
RGVsYXdhcmUgQ291bnR5IE5ld3MgTmV0d29yayB7e1dTfGRlbGNvbmV3c25ldHdvcmsuY29tfX0gCioq
ICcnTmV3cyBvZiBEZWxhd2FyZSBDb3VudHknJyB7e1dTfG5ld3NvZmRlbGF3YXJlY291bnR5LmNvbX19
IG9mIFtbSGF2ZXJ0b3duLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ0NvdW50eSBQcmVzcycnIHt7V1N8Y291
bnR5cHJlc3NvbmxpbmUuY29tfX0gb2YgW1tOZXd0b3duIFNxdWFyZSwgUGVubnN5bHZhbmlhXV0KKiog
JydHYXJuZXQgVmFsbGV5IFByZXNzJycge3tXU3xjb3VudHlwcmVzc29ubGluZS5jb219fSBvZiBbW0ds
ZW4gTWlsbHMsIFBlbm5zeWx2YW5pYV1dCioqICcnU3ByaW5nZmllbGQgUHJlc3MnJyB7e1dTfGNvdW50
eXByZXNzb25saW5lLmNvbX19IG9mIFtbU3ByaW5nZmllbGQsIFBlbm5zeWx2YW5pYV1dCioqICcnVG93
biBUYWxrJycge3tXU3x0b3dudGFsa25ld3MuY29tfX0gb2YgW1tSaWRsZXksIFBlbm5zeWx2YW5pYV1d
CgoqIEJlcmtzLU1vbnQgTmV3c3BhcGVycyB7e1dTfGJlcmtzbW9udG5ld3MuY29tfX0gCioqICcnVGhl
IEJveWVydG93biBBcmVhIFRpbWVzJycge3tXU3xiZXJrc21vbnRuZXdzLmNvbS9ib3llcnRvd25fYXJl
YV90aW1lc319IG9mIFtbQm95ZXJ0b3duLCBQZW5uc3lsdmFuaWFdXQoqKiAnJ1RoZSBLdXR6dG93biBB
cmVhIFBhdHJpb3QnJyB7e1dTfGJlcmtzbW9udG5ld3MuY29tL2t1dHp0b3duX2FyZWFfcGF0cmlvdH19
IG9mIFtbS3V0enRvd24sIFBlbm5zeWx2YW5pYV1dCioqICcnVGhlIEhhbWJ1cmcgQXJlYSBJdGVtJycg
e3tXU3xiZXJrc21vbnRuZXdzLmNvbS9oYW1idXJnX2FyZWFfaXRlbX19IG9mIFtbSGFtYnVyZywgUGVu
bnN5bHZhbmlhXV0KKiogJydUaGUgU291dGhlcm4gQmVya3MgTmV3cycnIHt7V1N8YmVya3Ntb250bmV3
cy5jb20vc291dGhlcm5fYmVya3NfbmV3c319IG9mIFtbRXhldGVyIFRvd25zaGlwLCBCZXJrcyBDb3Vu
dHksIFBlbm5zeWx2YW5pYV1dCioqICcnQ29tbXVuaXR5IENvbm5lY3Rpb24nJyB7e1dTfGJlcmtzbW9u
dG5ld3MuY29tL2NvbW11bml0eV9jb25uZWN0aW9ufX0gb2YgW1tCb3llcnRvd24sIFBlbm5zeWx2YW5p
YV1dCgoqIE1hZ2F6aW5lcwoqKiAnJ0J1Y2tzIENvLiBUb3duICYgQ291bnRyeSBMaXZpbmcnJyB7e1dT
fGJ1Y2tzY291bnR5bWFnYXppbmUuY29tfX0gCioqICcnUGFyZW50cyBFeHByZXNzJycge3tXU3xwYXJl
bnRzLWV4cHJlc3MuY29tfX0gCioqICcnUmVhbCBNZW4sIFJlZG5lY2tzJycge3tXU3xyZWFsbWVucmVk
bmVjay5jb219fSAKCnt7SlJDfX0KCj09UmVmZXJlbmNlcz09CjxyZWZlcmVuY2VzIC8+CgpbW0NhdGVn
b3J5OkpvdXJuYWwgUmVnaXN0ZXIgcHVibGljYXRpb25zfCpdXQo=
"""

func DATA_speedtest2_InputStream() -> InputStream {
    let decodedData = Data(base64Encoded: encodedString, options: .ignoreUnknownCharacters)!
    return InputStream(data: decodedData)
}
